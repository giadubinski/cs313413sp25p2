COMP 313/413 Project 2 Report Template - Gianna Dubinski

TestList.java and TestIterator.java

	TODO also try with a LinkedList - does it make any difference?

		Using a LinkedList does not make any difference, using this will have different
		execution times.

TestList.java

	testRemoveObject()

		list.remove(5); // what does this method do?

			This removes what was in index 5 from the list.

		list.remove(Integer.valueOf(5)); // what does this one do?

			This looks for and removes the value of 5 from the list.

TestIterator.java

	testRemove()

		i.remove(); // what happens if you use list.remove(77)?

			If I used list.remove(77) it would display the message of
			java.util.ConcurrentModificationException to create a breakpoint.

TestPerformance.java

	State how many times the tests were executed for each SIZE (10, 100, 1000 and 10000)
	to get the running time in milliseconds and how the test running times were recorded.
	These are examples of SIZEs you might choose, you can choose others if you wish.

	SIZE 10
								  #1   #2   #3   #4   #5   #6 	... (as many tests as you ran)
        testArrayListAddRemove:  3.2  3.1  3.3  3.2  3.1  3.2  ... (fill these in in ms)
        testLinkedListAddRemove: 2.1  2.2  2.0  2.1  val5  val6
		testArrayListAccess:     1.8  1.7  1.9  1.8  val5  val6
        testLinkedListAccess:    2.9  2.8  3.0  2.9  val5  val6

	SIZE 100
								  #1   #2   #3   #4   #5   #6 	... (as many tests as you ran)
        testArrayListAddRemove:  val1 val2 val3 val4 val5 val6  ... (fill these in in ms)
        testLinkedListAddRemove: val1 val2 val3 val4 val5 val6
		testArrayListAccess:     val1 val2 val3 val4 val5 val6
        testLinkedListAccess:    val1 val2 val3 val4 val5 val6

	SIZE 1000
								  #1   #2   #3   #4   #5   #6 	... (as many tests as you ran)
        testArrayListAddRemove:  val1 val2 val3 val4 val5 val6  ... (fill these in in ms)
        testLinkedListAddRemove: val1 val2 val3 val4 val5 val6
		testArrayListAccess:     val1 val2 val3 val4 val5 val6
        testLinkedListAccess:    val1 val2 val3 val4 val5 val6

	SIZE 10000
								  #1   #2   #3   #4   #5   #6 	... (as many tests as you ran)
        testArrayListAddRemove:  val1 val2 val3 val4 val5 val6  ... (fill these in in ms)
        testLinkedListAddRemove: val1 val2 val3 val4 val5 val6
		testArrayListAccess:     val1 val2 val3 val4 val5 val6
        testLinkedListAccess:    val1 val2 val3 val4 val5 val6

	listAccess - which type of List is better to use, and why?

		The type of List that is better to use is ArrayList since this gives constant time
		through array indexing.

	listAddRemove - which type of List is better to use, and why?

		The type of List that is better to use is LinkedList since it is constant time which is
		constant and linear when increasing with removing/decreasing or adding/increasing the
		list size.